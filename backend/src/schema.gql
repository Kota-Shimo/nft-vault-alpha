# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: String!
  walletAddresses: [String!]
  role: String
}

type NftItem {
  id: String!
  title: String
  chainType: String!
  metadataHash: String!
  owner: User
  isForSale: Boolean!
  price: Float
}

type Journal {
  id: ID!
  accountDr: String!
  accountCr: String!
  amountJpy: Float!
  freeeDealId: Int
}

type Proof {
  id: ID!
  txId: String!
  celestiaHash: String!
  pdfUrl: String!
}

type Query {
  totalBalanceJpy: Float!
  myNfts(chainType: String): [NftItem!]!
  marketNfts(chainType: String): [NftItem!]!
  evmNfts(owner: String!): [NftItem!]!
  journal: [Journal!]!
  journalCsv: String!
  proofs: [Proof!]!
  latestTxId: String
}

type Mutation {
  register(email: String!, password: String!): String!
  login(email: String!, password: String!): String!
  connectWallet(input: ConnectWalletInput!): Boolean!
  mintNft(input: MintNftInput!): NftItem!
  listForSale(input: ListForSaleInput!): NftItem!
  buyNft(input: BuyNftInput!): NftItem!
  mintNftOnEvm(to: String!, tokenUri: String!): String!
  generateJournal: Int!
  generateProof(txId: String!): Boolean!
  createCheckout(tenantId: String!, plan: Plan!): String!
  sendJournalToFreee(tenantId: String!): Int!
  testFreeeSend: Boolean!
}

input ConnectWalletInput {
  address: String!
  signature: String!
  chainType: String!
}

input MintNftInput {
  title: String!
  description: String!
  imageBase64: String!
}

input ListForSaleInput {
  nftId: String!
  price: Int!
}

input BuyNftInput {
  nftId: String!
}

"""Subscription plan"""
enum Plan {
  STARTER
  BUSINESS
  ENTERPRISE
}